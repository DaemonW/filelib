package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.SyncInfo;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SYNC_INFO".
*/
public class SyncInfoDao extends AbstractDao<SyncInfo, Long> {

    public static final String TABLENAME = "SYNC_INFO";

    /**
     * Properties of entity SyncInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SyncFlag = new Property(1, Integer.class, "syncFlag", false, "SYNC_FLAG");
        public final static Property InsidePath = new Property(2, String.class, "insidePath", false, "INSIDE_PATH");
        public final static Property Size = new Property(3, Long.class, "size", false, "SIZE");
        public final static Property Checksum = new Property(4, String.class, "checksum", false, "CHECKSUM");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
        public final static Property Existed = new Property(6, Boolean.class, "existed", false, "EXISTED");
        public final static Property Syncing = new Property(7, Boolean.class, "syncing", false, "SYNCING");
    };


    public SyncInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SyncInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYNC_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYNC_FLAG\" INTEGER," + // 1: syncFlag
                "\"INSIDE_PATH\" TEXT," + // 2: insidePath
                "\"SIZE\" INTEGER," + // 3: size
                "\"CHECKSUM\" TEXT," + // 4: checksum
                "\"VERSION\" TEXT," + // 5: version
                "\"EXISTED\" INTEGER," + // 6: existed
                "\"SYNCING\" INTEGER);"); // 7: syncing
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SYNC_INFO_SYNC_FLAG_INSIDE_PATH ON SYNC_INFO" +
                " (\"SYNC_FLAG\",\"INSIDE_PATH\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYNC_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SyncInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer syncFlag = entity.getSyncFlag();
        if (syncFlag != null) {
            stmt.bindLong(2, syncFlag);
        }
 
        String insidePath = entity.getInsidePath();
        if (insidePath != null) {
            stmt.bindString(3, insidePath);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(4, size);
        }
 
        String checksum = entity.getChecksum();
        if (checksum != null) {
            stmt.bindString(5, checksum);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
 
        Boolean existed = entity.getExisted();
        if (existed != null) {
            stmt.bindLong(7, existed ? 1L: 0L);
        }
 
        Boolean syncing = entity.getSyncing();
        if (syncing != null) {
            stmt.bindLong(8, syncing ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SyncInfo readEntity(Cursor cursor, int offset) {
        SyncInfo entity = new SyncInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // syncFlag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // insidePath
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // checksum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // version
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // existed
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // syncing
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SyncInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSyncFlag(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setInsidePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setChecksum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExisted(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setSyncing(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SyncInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SyncInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
