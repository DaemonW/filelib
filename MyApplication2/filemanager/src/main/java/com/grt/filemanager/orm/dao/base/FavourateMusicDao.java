package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.FavourateMusic;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FAVOURATE_MUSIC".
*/
public class FavourateMusicDao extends AbstractDao<FavourateMusic, Long> {

    public static final String TABLENAME = "FAVOURATE_MUSIC";

    /**
     * Properties of entity FavourateMusic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Album = new Property(3, String.class, "album", false, "ALBUM");
        public final static Property Size = new Property(4, Long.class, "size", false, "SIZE");
        public final static Property LastModified = new Property(5, Long.class, "lastModified", false, "LAST_MODIFIED");
        public final static Property MimeType = new Property(6, String.class, "mimeType", false, "MIME_TYPE");
        public final static Property IsFolder = new Property(7, Boolean.class, "isFolder", false, "IS_FOLDER");
        public final static Property ClickTime = new Property(8, Long.class, "clickTime", false, "CLICK_TIME");
        public final static Property Duration = new Property(9, Long.class, "duration", false, "DURATION");
    };


    public FavourateMusicDao(DaoConfig config) {
        super(config);
    }
    
    public FavourateMusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVOURATE_MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PATH\" TEXT UNIQUE ," + // 2: path
                "\"ALBUM\" TEXT," + // 3: album
                "\"SIZE\" INTEGER," + // 4: size
                "\"LAST_MODIFIED\" INTEGER," + // 5: lastModified
                "\"MIME_TYPE\" TEXT," + // 6: mimeType
                "\"IS_FOLDER\" INTEGER," + // 7: isFolder
                "\"CLICK_TIME\" INTEGER," + // 8: clickTime
                "\"DURATION\" INTEGER);"); // 9: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVOURATE_MUSIC\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FavourateMusic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(5, size);
        }
 
        Long lastModified = entity.getLastModified();
        if (lastModified != null) {
            stmt.bindLong(6, lastModified);
        }
 
        String mimeType = entity.getMimeType();
        if (mimeType != null) {
            stmt.bindString(7, mimeType);
        }
 
        Boolean isFolder = entity.getIsFolder();
        if (isFolder != null) {
            stmt.bindLong(8, isFolder ? 1L: 0L);
        }
 
        Long clickTime = entity.getClickTime();
        if (clickTime != null) {
            stmt.bindLong(9, clickTime);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(10, duration);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FavourateMusic readEntity(Cursor cursor, int offset) {
        FavourateMusic entity = new FavourateMusic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // album
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // lastModified
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mimeType
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isFolder
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // clickTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // duration
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FavourateMusic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLastModified(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMimeType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsFolder(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setClickTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setDuration(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FavourateMusic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FavourateMusic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
