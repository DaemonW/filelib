package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.Label;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LABEL".
*/
public class LabelDao extends AbstractDao<Label, Long> {

    public static final String TABLENAME = "LABEL";

    /**
     * Properties of entity Label.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LabelType = new Property(1, String.class, "labelType", false, "LABEL_TYPE");
        public final static Property LabelColor = new Property(2, Integer.class, "labelColor", false, "LABEL_COLOR");
        public final static Property LastModified = new Property(3, Long.class, "lastModified", false, "LAST_MODIFIED");
    };


    public LabelDao(DaoConfig config) {
        super(config);
    }
    
    public LabelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LABEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LABEL_TYPE\" TEXT UNIQUE ," + // 1: labelType
                "\"LABEL_COLOR\" INTEGER," + // 2: labelColor
                "\"LAST_MODIFIED\" INTEGER);"); // 3: lastModified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LABEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Label entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String labelType = entity.getLabelType();
        if (labelType != null) {
            stmt.bindString(2, labelType);
        }
 
        Integer labelColor = entity.getLabelColor();
        if (labelColor != null) {
            stmt.bindLong(3, labelColor);
        }
 
        Long lastModified = entity.getDate_modified();
        if (lastModified != null) {
            stmt.bindLong(4, lastModified);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Label readEntity(Cursor cursor, int offset) {
        Label entity = new Label( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // labelType
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // labelColor
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // lastModified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Label entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLabelType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLabelColor(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDate_modified(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Label entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Label entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
