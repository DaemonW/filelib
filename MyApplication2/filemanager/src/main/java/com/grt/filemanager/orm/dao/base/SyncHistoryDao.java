package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.SyncHistory;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SYNC_HISTORY".
*/
public class SyncHistoryDao extends AbstractDao<SyncHistory, Long> {

    public static final String TABLENAME = "SYNC_HISTORY";

    /**
     * Properties of entity SyncHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SyncFlag = new Property(1, Integer.class, "syncFlag", false, "SYNC_FLAG");
        public final static Property HistoryFlag = new Property(2, Long.class, "historyFlag", false, "HISTORY_FLAG");
        public final static Property Size = new Property(3, Long.class, "size", false, "SIZE");
        public final static Property Count = new Property(4, Integer.class, "count", false, "COUNT");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
    };


    public SyncHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public SyncHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYNC_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYNC_FLAG\" INTEGER," + // 1: syncFlag
                "\"HISTORY_FLAG\" INTEGER," + // 2: historyFlag
                "\"SIZE\" INTEGER," + // 3: size
                "\"COUNT\" INTEGER," + // 4: count
                "\"TYPE\" INTEGER);"); // 5: type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SYNC_HISTORY_SYNC_FLAG_HISTORY_FLAG ON SYNC_HISTORY" +
                " (\"SYNC_FLAG\",\"HISTORY_FLAG\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYNC_HISTORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SyncHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer syncFlag = entity.getSyncFlag();
        if (syncFlag != null) {
            stmt.bindLong(2, syncFlag);
        }
 
        Long historyFlag = entity.getHistoryFlag();
        if (historyFlag != null) {
            stmt.bindLong(3, historyFlag);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(4, size);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(5, count);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SyncHistory readEntity(Cursor cursor, int offset) {
        SyncHistory entity = new SyncHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // syncFlag
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // historyFlag
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // count
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SyncHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSyncFlag(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHistoryFlag(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SyncHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SyncHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
