package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.App;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "APP".
*/
public class AppDao extends AbstractDao<App, Long> {

    public static final String TABLENAME = "APP";

    /**
     * Properties of entity App.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DisplayName = new Property(1, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Path = new Property(3, String.class, "path", false, "PATH");
        public final static Property Size = new Property(4, Long.class, "size", false, "SIZE");
        public final static Property LastModified = new Property(5, Long.class, "lastModified", false, "LAST_MODIFIED");
        public final static Property VersionCode = new Property(6, Integer.class, "versionCode", false, "VERSION_CODE");
        public final static Property InstalledVersionCode = new Property(7, Integer.class, "installedVersionCode", false, "INSTALLED_VERSION_CODE");
        public final static Property VersionName = new Property(8, String.class, "versionName", false, "VERSION_NAME");
        public final static Property IsSystem = new Property(9, Boolean.class, "isSystem", false, "IS_SYSTEM");
        public final static Property IsInstalled = new Property(10, Boolean.class, "isInstalled", false, "IS_INSTALLED");
        public final static Property IsPackage = new Property(11, Boolean.class, "isPackage", false, "IS_PACKAGE");
    };


    public AppDao(DaoConfig config) {
        super(config);
    }
    
    public AppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISPLAY_NAME\" TEXT," + // 1: displayName
                "\"PACKAGE_NAME\" TEXT," + // 2: packageName
                "\"PATH\" TEXT UNIQUE ," + // 3: path
                "\"SIZE\" INTEGER," + // 4: size
                "\"LAST_MODIFIED\" INTEGER," + // 5: lastModified
                "\"VERSION_CODE\" INTEGER," + // 6: versionCode
                "\"INSTALLED_VERSION_CODE\" INTEGER," + // 7: installedVersionCode
                "\"VERSION_NAME\" TEXT," + // 8: versionName
                "\"IS_SYSTEM\" INTEGER," + // 9: isSystem
                "\"IS_INSTALLED\" INTEGER," + // 10: isInstalled
                "\"IS_PACKAGE\" INTEGER);"); // 11: isPackage
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, App entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(2, displayName);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(5, size);
        }
 
        Long lastModified = entity.getLastModified();
        if (lastModified != null) {
            stmt.bindLong(6, lastModified);
        }
 
        Integer versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindLong(7, versionCode);
        }
 
        Integer installedVersionCode = entity.getInstalledVersionCode();
        if (installedVersionCode != null) {
            stmt.bindLong(8, installedVersionCode);
        }
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(9, versionName);
        }
 
        Boolean isSystem = entity.getIsSystem();
        if (isSystem != null) {
            stmt.bindLong(10, isSystem ? 1L: 0L);
        }
 
        Boolean isInstalled = entity.getIsInstalled();
        if (isInstalled != null) {
            stmt.bindLong(11, isInstalled ? 1L: 0L);
        }
 
        Boolean isPackage = entity.getIsPackage();
        if (isPackage != null) {
            stmt.bindLong(12, isPackage ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public App readEntity(Cursor cursor, int offset) {
        App entity = new App( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // displayName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packageName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // lastModified
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // versionCode
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // installedVersionCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // versionName
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isSystem
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isInstalled
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // isPackage
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, App entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDisplayName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLastModified(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setVersionCode(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setInstalledVersionCode(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVersionName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSystem(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsInstalled(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsPackage(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(App entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(App entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
