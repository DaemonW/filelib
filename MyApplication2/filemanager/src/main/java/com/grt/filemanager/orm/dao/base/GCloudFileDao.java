package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.GCloudFile;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GCLOUD_FILE".
*/
public class GCloudFileDao extends AbstractDao<GCloudFile, Long> {

    public static final String TABLENAME = "GCLOUD_FILE";

    /**
     * Properties of entity GCloudFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Size = new Property(3, Long.class, "size", false, "SIZE");
        public final static Property MimeType = new Property(4, String.class, "mimeType", false, "MIME_TYPE");
        public final static Property LastModified = new Property(5, Long.class, "lastModified", false, "LAST_MODIFIED");
        public final static Property IsFolder = new Property(6, Boolean.class, "isFolder", false, "IS_FOLDER");
        public final static Property ParentId = new Property(7, String.class, "parentId", false, "PARENT_ID");
        public final static Property FileId = new Property(8, String.class, "fileId", false, "FILE_ID");
        public final static Property Folder = new Property(9, String.class, "folder", false, "FOLDER");
        public final static Property Url = new Property(10, String.class, "url", false, "URL");
        public final static Property ThumbUrl = new Property(11, String.class, "thumbUrl", false, "THUMB_URL");
        public final static Property VersionName = new Property(12, String.class, "versionName", false, "VERSION_NAME");
        public final static Property VersionCode = new Property(13, String.class, "versionCode", false, "VERSION_CODE");
        public final static Property PackageName = new Property(14, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property DataUrl = new Property(15, String.class, "dataUrl", false, "DATA_URL");
        public final static Property DataSize = new Property(16, Integer.class, "dataSize", false, "DATA_SIZE");
        public final static Property Status = new Property(17, Integer.class, "status", false, "STATUS");
    };


    public GCloudFileDao(DaoConfig config) {
        super(config);
    }
    
    public GCloudFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GCLOUD_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PATH\" TEXT," + // 2: path
                "\"SIZE\" INTEGER," + // 3: size
                "\"MIME_TYPE\" TEXT," + // 4: mimeType
                "\"LAST_MODIFIED\" INTEGER," + // 5: lastModified
                "\"IS_FOLDER\" INTEGER," + // 6: isFolder
                "\"PARENT_ID\" TEXT," + // 7: parentId
                "\"FILE_ID\" TEXT," + // 8: fileId
                "\"FOLDER\" TEXT," + // 9: folder
                "\"URL\" TEXT," + // 10: url
                "\"THUMB_URL\" TEXT," + // 11: thumbUrl
                "\"VERSION_NAME\" TEXT," + // 12: versionName
                "\"VERSION_CODE\" TEXT," + // 13: versionCode
                "\"PACKAGE_NAME\" TEXT," + // 14: packageName
                "\"DATA_URL\" TEXT," + // 15: dataUrl
                "\"DATA_SIZE\" INTEGER," + // 16: dataSize
                "\"STATUS\" INTEGER);"); // 17: status
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GCLOUD_FILE_PATH_FILE_ID ON GCLOUD_FILE" +
                " (\"PATH\",\"FILE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GCLOUD_FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GCloudFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(4, size);
        }
 
        String mimeType = entity.getMimeType();
        if (mimeType != null) {
            stmt.bindString(5, mimeType);
        }
 
        Long lastModified = entity.getLastModified();
        if (lastModified != null) {
            stmt.bindLong(6, lastModified);
        }
 
        Boolean isFolder = entity.getIsFolder();
        if (isFolder != null) {
            stmt.bindLong(7, isFolder ? 1L: 0L);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(8, parentId);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(9, fileId);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(10, folder);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(11, url);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(12, thumbUrl);
        }
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(13, versionName);
        }
 
        String versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindString(14, versionCode);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(15, packageName);
        }
 
        String dataUrl = entity.getDataUrl();
        if (dataUrl != null) {
            stmt.bindString(16, dataUrl);
        }
 
        Integer dataSize = entity.getDataSize();
        if (dataSize != null) {
            stmt.bindLong(17, dataSize);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(18, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GCloudFile readEntity(Cursor cursor, int offset) {
        GCloudFile entity = new GCloudFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mimeType
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // lastModified
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isFolder
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // parentId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fileId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // folder
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // thumbUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // versionName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // versionCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // packageName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // dataUrl
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // dataSize
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GCloudFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMimeType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastModified(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIsFolder(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setParentId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFolder(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setThumbUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVersionName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVersionCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPackageName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDataUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDataSize(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setStatus(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GCloudFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GCloudFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
