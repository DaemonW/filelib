package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.FragmentInfo;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FRAGMENT_INFO".
*/
public class FragmentInfoDao extends AbstractDao<FragmentInfo, Void> {

    public static final String TABLENAME = "FRAGMENT_INFO";

    /**
     * Properties of entity FragmentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DataId = new Property(0, Integer.class, "dataId", false, "DATA_ID");
        public final static Property AccountId = new Property(1, Integer.class, "accountId", false, "ACCOUNT_ID");
        public final static Property FragmentId = new Property(2, Long.class, "fragmentId", false, "FRAGMENT_ID");
        public final static Property FragmentTitle = new Property(3, String.class, "fragmentTitle", false, "FRAGMENT_TITLE");
        public final static Property AccountTitle = new Property(4, String.class, "accountTitle", false, "ACCOUNT_TITLE");
        public final static Property CurrentPath = new Property(5, String.class, "currentPath", false, "CURRENT_PATH");
        public final static Property Stack = new Property(6, String.class, "stack", false, "STACK");
        public final static Property SortType = new Property(7, Integer.class, "sortType", false, "SORT_TYPE");
        public final static Property SortOrder = new Property(8, Integer.class, "sortOrder", false, "SORT_ORDER");
        public final static Property RankMode = new Property(9, Integer.class, "rankMode", false, "RANK_MODE");
    };


    public FragmentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FragmentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRAGMENT_INFO\" (" + //
                "\"DATA_ID\" INTEGER," + // 0: dataId
                "\"ACCOUNT_ID\" INTEGER," + // 1: accountId
                "\"FRAGMENT_ID\" INTEGER," + // 2: fragmentId
                "\"FRAGMENT_TITLE\" TEXT," + // 3: fragmentTitle
                "\"ACCOUNT_TITLE\" TEXT," + // 4: accountTitle
                "\"CURRENT_PATH\" TEXT," + // 5: currentPath
                "\"STACK\" TEXT," + // 6: stack
                "\"SORT_TYPE\" INTEGER," + // 7: sortType
                "\"SORT_ORDER\" INTEGER," + // 8: sortOrder
                "\"RANK_MODE\" INTEGER);"); // 9: rankMode
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_FRAGMENT_INFO_DATA_ID_ACCOUNT_ID_FRAGMENT_ID ON FRAGMENT_INFO" +
                " (\"DATA_ID\",\"ACCOUNT_ID\",\"FRAGMENT_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRAGMENT_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FragmentInfo entity) {
        stmt.clearBindings();
 
        Integer dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindLong(1, dataId);
        }
 
        Integer accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindLong(2, accountId);
        }
 
        Long fragmentId = entity.getFragmentId();
        if (fragmentId != null) {
            stmt.bindLong(3, fragmentId);
        }
 
        String fragmentTitle = entity.getFragmentTitle();
        if (fragmentTitle != null) {
            stmt.bindString(4, fragmentTitle);
        }
 
        String accountTitle = entity.getAccountTitle();
        if (accountTitle != null) {
            stmt.bindString(5, accountTitle);
        }
 
        String currentPath = entity.getCurrentPath();
        if (currentPath != null) {
            stmt.bindString(6, currentPath);
        }
 
        String stack = entity.getStack();
        if (stack != null) {
            stmt.bindString(7, stack);
        }
 
        Integer sortType = entity.getSortType();
        if (sortType != null) {
            stmt.bindLong(8, sortType);
        }
 
        Integer sortOrder = entity.getSortOrder();
        if (sortOrder != null) {
            stmt.bindLong(9, sortOrder);
        }
 
        Integer rankMode = entity.getRankMode();
        if (rankMode != null) {
            stmt.bindLong(10, rankMode);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FragmentInfo readEntity(Cursor cursor, int offset) {
        FragmentInfo entity = new FragmentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // dataId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // accountId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // fragmentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fragmentTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // accountTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // currentPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // stack
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // sortType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // sortOrder
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // rankMode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FragmentInfo entity, int offset) {
        entity.setDataId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setAccountId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFragmentId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFragmentTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccountTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrentPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStack(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSortType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSortOrder(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setRankMode(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FragmentInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FragmentInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
