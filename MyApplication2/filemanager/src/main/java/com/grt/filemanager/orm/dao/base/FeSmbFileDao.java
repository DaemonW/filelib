package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.FeSmbFile;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FE_SMB_FILE".
*/
public class FeSmbFileDao extends AbstractDao<FeSmbFile, Long> {

    public static final String TABLENAME = "FE_SMB_FILE";

    /**
     * Properties of entity FeSmbFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property LastModified = new Property(3, long.class, "lastModified", false, "LAST_MODIFIED");
        public final static Property Size = new Property(4, long.class, "size", false, "SIZE");
        public final static Property MimeType = new Property(5, String.class, "mimeType", false, "MIME_TYPE");
        public final static Property IsFolder = new Property(6, boolean.class, "isFolder", false, "IS_FOLDER");
        public final static Property Count = new Property(7, int.class, "count", false, "COUNT");
        public final static Property ParentId = new Property(8, long.class, "parentId", false, "PARENT_ID");
        public final static Property AccountId = new Property(9, int.class, "accountId", false, "ACCOUNT_ID");
        public final static Property CachePath = new Property(10, String.class, "cachePath", false, "CACHE_PATH");
    };


    public FeSmbFileDao(DaoConfig config) {
        super(config);
    }
    
    public FeSmbFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FE_SMB_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PATH\" TEXT NOT NULL ," + // 2: path
                "\"LAST_MODIFIED\" INTEGER NOT NULL ," + // 3: lastModified
                "\"SIZE\" INTEGER NOT NULL ," + // 4: size
                "\"MIME_TYPE\" TEXT NOT NULL ," + // 5: mimeType
                "\"IS_FOLDER\" INTEGER NOT NULL ," + // 6: isFolder
                "\"COUNT\" INTEGER NOT NULL ," + // 7: count
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 8: parentId
                "\"ACCOUNT_ID\" INTEGER NOT NULL ," + // 9: accountId
                "\"CACHE_PATH\" TEXT);"); // 10: cachePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FE_SMB_FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FeSmbFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getPath());
        stmt.bindLong(4, entity.getLastModified());
        stmt.bindLong(5, entity.getSize());
        stmt.bindString(6, entity.getMimeType());
        stmt.bindLong(7, entity.getIsFolder() ? 1L: 0L);
        stmt.bindLong(8, entity.getCount());
        stmt.bindLong(9, entity.getParentId());
        stmt.bindLong(10, entity.getAccountId());
 
        String cachePath = entity.getCachePath();
        if (cachePath != null) {
            stmt.bindString(11, cachePath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FeSmbFile readEntity(Cursor cursor, int offset) {
        FeSmbFile entity = new FeSmbFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // path
            cursor.getLong(offset + 3), // lastModified
            cursor.getLong(offset + 4), // size
            cursor.getString(offset + 5), // mimeType
            cursor.getShort(offset + 6) != 0, // isFolder
            cursor.getInt(offset + 7), // count
            cursor.getLong(offset + 8), // parentId
            cursor.getInt(offset + 9), // accountId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // cachePath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FeSmbFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.getString(offset + 2));
        entity.setLastModified(cursor.getLong(offset + 3));
        entity.setSize(cursor.getLong(offset + 4));
        entity.setMimeType(cursor.getString(offset + 5));
        entity.setIsFolder(cursor.getShort(offset + 6) != 0);
        entity.setCount(cursor.getInt(offset + 7));
        entity.setParentId(cursor.getLong(offset + 8));
        entity.setAccountId(cursor.getInt(offset + 9));
        entity.setCachePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FeSmbFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FeSmbFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
