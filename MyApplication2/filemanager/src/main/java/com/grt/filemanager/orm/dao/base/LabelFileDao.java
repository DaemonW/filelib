package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.LabelFile;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LABEL_FILE".
*/
public class LabelFileDao extends AbstractDao<LabelFile, Long> {

    public static final String TABLENAME = "LABEL_FILE";

    /**
     * Properties of entity LabelFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Size = new Property(3, Long.class, "size", false, "SIZE");
        public final static Property Date_modified = new Property(4, Long.class, "date_modified", false, "DATE_MODIFIED");
        public final static Property LabelId = new Property(5, Long.class, "labelId", false, "LABEL_ID");
        public final static Property Mime_type = new Property(6, String.class, "mime_type", false, "MIME_TYPE");
        public final static Property Is_file = new Property(7, Boolean.class, "is_file", false, "IS_FILE");
    };


    public LabelFileDao(DaoConfig config) {
        super(config);
    }
    
    public LabelFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LABEL_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PATH\" TEXT," + // 2: path
                "\"SIZE\" INTEGER," + // 3: size
                "\"DATE_MODIFIED\" INTEGER," + // 4: date_modified
                "\"LABEL_ID\" INTEGER," + // 5: labelId
                "\"MIME_TYPE\" TEXT," + // 6: mime_type
                "\"IS_FILE\" INTEGER);"); // 7: is_file
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LABEL_FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LabelFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(4, size);
        }
 
        Long date_modified = entity.getDate_modified();
        if (date_modified != null) {
            stmt.bindLong(5, date_modified);
        }
 
        Long labelId = entity.getLabelId();
        if (labelId != null) {
            stmt.bindLong(6, labelId);
        }
 
        String mime_type = entity.getMime_type();
        if (mime_type != null) {
            stmt.bindString(7, mime_type);
        }
 
        Boolean is_file = entity.getIs_file();
        if (is_file != null) {
            stmt.bindLong(8, is_file ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LabelFile readEntity(Cursor cursor, int offset) {
        LabelFile entity = new LabelFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // date_modified
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // labelId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mime_type
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // is_file
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LabelFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDate_modified(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLabelId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMime_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_file(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LabelFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LabelFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
