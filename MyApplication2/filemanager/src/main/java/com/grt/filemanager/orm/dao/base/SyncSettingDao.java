package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.SyncSetting;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SYNC_SETTING".
*/
public class SyncSettingDao extends AbstractDao<SyncSetting, Long> {

    public static final String TABLENAME = "SYNC_SETTING";

    /**
     * Properties of entity SyncSetting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SyncFlag = new Property(1, Integer.class, "syncFlag", false, "SYNC_FLAG");
        public final static Property KeyName = new Property(2, String.class, "keyName", false, "KEY_NAME");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
    };


    public SyncSettingDao(DaoConfig config) {
        super(config);
    }
    
    public SyncSettingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYNC_SETTING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYNC_FLAG\" INTEGER," + // 1: syncFlag
                "\"KEY_NAME\" TEXT," + // 2: keyName
                "\"VALUE\" TEXT);"); // 3: value
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SYNC_SETTING_SYNC_FLAG_KEY_NAME ON SYNC_SETTING" +
                " (\"SYNC_FLAG\",\"KEY_NAME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYNC_SETTING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SyncSetting entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer syncFlag = entity.getSyncFlag();
        if (syncFlag != null) {
            stmt.bindLong(2, syncFlag);
        }
 
        String keyName = entity.getKeyName();
        if (keyName != null) {
            stmt.bindString(3, keyName);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SyncSetting readEntity(Cursor cursor, int offset) {
        SyncSetting entity = new SyncSetting( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // syncFlag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // keyName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // value
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SyncSetting entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSyncFlag(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setKeyName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SyncSetting entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SyncSetting entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
