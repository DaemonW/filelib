package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.SmbAccount;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SMB_ACCOUNT".
*/
public class SmbAccountDao extends AbstractDao<SmbAccount, Long> {

    public static final String TABLENAME = "SMB_ACCOUNT";

    /**
     * Properties of entity SmbAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Domainname = new Property(1, String.class, "domainname", false, "DOMAINNAME");
        public final static Property Serveraddress = new Property(2, String.class, "serveraddress", false, "SERVERADDRESS");
        public final static Property Account = new Property(3, String.class, "account", false, "ACCOUNT");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Byname = new Property(5, String.class, "byname", false, "BYNAME");
        public final static Property Anonymous = new Property(6, String.class, "anonymous", false, "ANONYMOUS");
        public final static Property Isscan = new Property(7, String.class, "isscan", false, "ISSCAN");
        public final static Property Islogin = new Property(8, String.class, "islogin", false, "ISLOGIN");
        public final static Property LoginPath = new Property(9, String.class, "loginPath", false, "LOGIN_PATH");
        public final static Property LoginTime = new Property(10, Long.class, "loginTime", false, "LOGIN_TIME");
        public final static Property Pcname = new Property(11, String.class, "pcname", false, "PCNAME");
    };


    public SmbAccountDao(DaoConfig config) {
        super(config);
    }
    
    public SmbAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMB_ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOMAINNAME\" TEXT," + // 1: domainname
                "\"SERVERADDRESS\" TEXT," + // 2: serveraddress
                "\"ACCOUNT\" TEXT," + // 3: account
                "\"PASSWORD\" TEXT," + // 4: password
                "\"BYNAME\" TEXT," + // 5: byname
                "\"ANONYMOUS\" TEXT," + // 6: anonymous
                "\"ISSCAN\" TEXT," + // 7: isscan
                "\"ISLOGIN\" TEXT," + // 8: islogin
                "\"LOGIN_PATH\" TEXT," + // 9: loginPath
                "\"LOGIN_TIME\" INTEGER," + // 10: loginTime
                "\"PCNAME\" TEXT);"); // 11: pcname
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMB_ACCOUNT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SmbAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String domainname = entity.getDomainname();
        if (domainname != null) {
            stmt.bindString(2, domainname);
        }
 
        String serveraddress = entity.getServeraddress();
        if (serveraddress != null) {
            stmt.bindString(3, serveraddress);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String byname = entity.getByname();
        if (byname != null) {
            stmt.bindString(6, byname);
        }
 
        String anonymous = entity.getAnonymous();
        if (anonymous != null) {
            stmt.bindString(7, anonymous);
        }
 
        String isscan = entity.getIsscan();
        if (isscan != null) {
            stmt.bindString(8, isscan);
        }
 
        String islogin = entity.getIslogin();
        if (islogin != null) {
            stmt.bindString(9, islogin);
        }
 
        String loginPath = entity.getLoginPath();
        if (loginPath != null) {
            stmt.bindString(10, loginPath);
        }
 
        Long loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindLong(11, loginTime);
        }
 
        String pcname = entity.getPcname();
        if (pcname != null) {
            stmt.bindString(12, pcname);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SmbAccount readEntity(Cursor cursor, int offset) {
        SmbAccount entity = new SmbAccount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // domainname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serveraddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // account
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // byname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // anonymous
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isscan
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // islogin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // loginPath
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // loginTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // pcname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SmbAccount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDomainname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServeraddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setByname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnonymous(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsscan(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIslogin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLoginPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLoginTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setPcname(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SmbAccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SmbAccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
