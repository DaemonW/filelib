package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.Partition;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PARTITION".
*/
public class PartitionDao extends AbstractDao<Partition, Long> {

    public static final String TABLENAME = "PARTITION";

    /**
     * Properties of entity Partition.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property SrcList = new Property(2, String.class, "srcList", false, "SRC_LIST");
        public final static Property DesFolder = new Property(3, String.class, "desFolder", false, "DES_FOLDER");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Size = new Property(5, Long.class, "size", false, "SIZE");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Task = new Property(7, Integer.class, "task", false, "TASK");
        public final static Property TmpFolder = new Property(8, String.class, "tmpFolder", false, "TMP_FOLDER");
        public final static Property PrivateKey = new Property(9, String.class, "privateKey", false, "PRIVATE_KEY");
        public final static Property Cloud = new Property(10, String.class, "cloud", false, "CLOUD");
        public final static Property Account = new Property(11, String.class, "account", false, "ACCOUNT");
        public final static Property Status = new Property(12, String.class, "status", false, "STATUS");
        public final static Property LocalSlice = new Property(13, String.class, "localSlice", false, "LOCAL_SLICE");
        public final static Property CloudSlice = new Property(14, String.class, "cloudSlice", false, "CLOUD_SLICE");
        public final static Property DownloadInfo = new Property(15, String.class, "downloadInfo", false, "DOWNLOAD_INFO");
        public final static Property EncryptNum = new Property(16, Integer.class, "encryptNum", false, "ENCRYPT_NUM");
    };


    public PartitionDao(DaoConfig config) {
        super(config);
    }
    
    public PartitionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARTITION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"SRC_LIST\" TEXT," + // 2: srcList
                "\"DES_FOLDER\" TEXT," + // 3: desFolder
                "\"NAME\" TEXT," + // 4: name
                "\"SIZE\" INTEGER," + // 5: size
                "\"TIME\" TEXT," + // 6: time
                "\"TASK\" INTEGER," + // 7: task
                "\"TMP_FOLDER\" TEXT," + // 8: tmpFolder
                "\"PRIVATE_KEY\" TEXT," + // 9: privateKey
                "\"CLOUD\" TEXT," + // 10: cloud
                "\"ACCOUNT\" TEXT," + // 11: account
                "\"STATUS\" TEXT," + // 12: status
                "\"LOCAL_SLICE\" TEXT," + // 13: localSlice
                "\"CLOUD_SLICE\" TEXT," + // 14: cloudSlice
                "\"DOWNLOAD_INFO\" TEXT," + // 15: downloadInfo
                "\"ENCRYPT_NUM\" INTEGER);"); // 16: encryptNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARTITION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Partition entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String srcList = entity.getSrcList();
        if (srcList != null) {
            stmt.bindString(3, srcList);
        }
 
        String desFolder = entity.getDesFolder();
        if (desFolder != null) {
            stmt.bindString(4, desFolder);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(6, size);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        Integer task = entity.getTask();
        if (task != null) {
            stmt.bindLong(8, task);
        }
 
        String tmpFolder = entity.getTmpFolder();
        if (tmpFolder != null) {
            stmt.bindString(9, tmpFolder);
        }
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(10, privateKey);
        }
 
        String cloud = entity.getCloud();
        if (cloud != null) {
            stmt.bindString(11, cloud);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(12, account);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(13, status);
        }
 
        String localSlice = entity.getLocalSlice();
        if (localSlice != null) {
            stmt.bindString(14, localSlice);
        }
 
        String cloudSlice = entity.getCloudSlice();
        if (cloudSlice != null) {
            stmt.bindString(15, cloudSlice);
        }
 
        String downloadInfo = entity.getDownloadInfo();
        if (downloadInfo != null) {
            stmt.bindString(16, downloadInfo);
        }
 
        Integer encryptNum = entity.getEncryptNum();
        if (encryptNum != null) {
            stmt.bindLong(17, encryptNum);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Partition readEntity(Cursor cursor, int offset) {
        Partition entity = new Partition( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // srcList
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desFolder
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // size
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // task
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tmpFolder
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // privateKey
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cloud
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // account
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // status
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // localSlice
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cloudSlice
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // downloadInfo
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // encryptNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Partition entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSrcList(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesFolder(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTask(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTmpFolder(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrivateKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCloud(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAccount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLocalSlice(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCloudSlice(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDownloadInfo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEncryptNum(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Partition entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Partition entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
