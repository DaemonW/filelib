package com.grt.filemanager.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.grt.filemanager.orm.dao.SugarsyncAccount;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SUGARSYNC_ACCOUNT".
*/
public class SugarsyncAccountDao extends AbstractDao<SugarsyncAccount, Long> {

    public static final String TABLENAME = "SUGARSYNC_ACCOUNT";

    /**
     * Properties of entity SugarsyncAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Token = new Property(2, String.class, "token", false, "TOKEN");
        public final static Property RefreshToken = new Property(3, String.class, "refreshToken", false, "REFRESH_TOKEN");
        public final static Property TotalSize = new Property(4, Long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property LeftSize = new Property(5, Long.class, "leftSize", false, "LEFT_SIZE");
        public final static Property LoginTime = new Property(6, Long.class, "loginTime", false, "LOGIN_TIME");
        public final static Property Use_url = new Property(7, String.class, "use_url", false, "USE_URL");
    };


    public SugarsyncAccountDao(DaoConfig config) {
        super(config);
    }
    
    public SugarsyncAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUGARSYNC_ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCOUNT\" TEXT UNIQUE ," + // 1: account
                "\"TOKEN\" TEXT," + // 2: token
                "\"REFRESH_TOKEN\" TEXT," + // 3: refreshToken
                "\"TOTAL_SIZE\" INTEGER," + // 4: totalSize
                "\"LEFT_SIZE\" INTEGER," + // 5: leftSize
                "\"LOGIN_TIME\" INTEGER," + // 6: loginTime
                "\"USE_URL\" TEXT);"); // 7: use_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUGARSYNC_ACCOUNT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SugarsyncAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(4, refreshToken);
        }
 
        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(5, totalSize);
        }
 
        Long leftSize = entity.getLeftSize();
        if (leftSize != null) {
            stmt.bindLong(6, leftSize);
        }
 
        Long loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindLong(7, loginTime);
        }
 
        String use_url = entity.getUse_url();
        if (use_url != null) {
            stmt.bindString(8, use_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SugarsyncAccount readEntity(Cursor cursor, int offset) {
        SugarsyncAccount entity = new SugarsyncAccount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // refreshToken
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // totalSize
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // leftSize
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // loginTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // use_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SugarsyncAccount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRefreshToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLeftSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLoginTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUse_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SugarsyncAccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SugarsyncAccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
