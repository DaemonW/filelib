package com.grt.filemanager.orm.dao.base;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        FragmentInfoDao.createTable(db, ifNotExists);
        StorageDao.createTable(db, ifNotExists);
        StatisticsDao.createTable(db, ifNotExists);
        AppDao.createTable(db, ifNotExists);
        SearchDao.createTable(db, ifNotExists);
        RecentOpenDao.createTable(db, ifNotExists);
        LabelDao.createTable(db, ifNotExists);
        LabelFileDao.createTable(db, ifNotExists);
        DownloadedFileDao.createTable(db, ifNotExists);
        FavourateMusicDao.createTable(db, ifNotExists);
        RecentMusicDao.createTable(db, ifNotExists);
        DownloadMusicDao.createTable(db, ifNotExists);
        DropboxAccountDao.createTable(db, ifNotExists);
        WebDavAccountDao.createTable(db, ifNotExists);
        FePrivateCloudAccountDao.createTable(db, ifNotExists);
        SinaStorageAccountDao.createTable(db, ifNotExists);
        DropboxFileDao.createTable(db, ifNotExists);
        WebDavFileDao.createTable(db, ifNotExists);
        FePrivateCloudFileDao.createTable(db, ifNotExists);
        SinaStorageFileDao.createTable(db, ifNotExists);
        GoogleDriveAccountDao.createTable(db, ifNotExists);
        OneDriveAccountDao.createTable(db, ifNotExists);
        BoxAccountDao.createTable(db, ifNotExists);
        YandexAccountDao.createTable(db, ifNotExists);
        SugarsyncAccountDao.createTable(db, ifNotExists);
        MixCloudAccountDao.createTable(db, ifNotExists);
        GoogleDriveFileDao.createTable(db, ifNotExists);
        OneDriveFileDao.createTable(db, ifNotExists);
        BoxFileDao.createTable(db, ifNotExists);
        YandexFileDao.createTable(db, ifNotExists);
        SugarsyncFileDao.createTable(db, ifNotExists);
        MixCloudFileDao.createTable(db, ifNotExists);
        AppFolderDao.createTable(db, ifNotExists);
        FtpFileInfoDao.createTable(db, ifNotExists);
        FtpAccountDao.createTable(db, ifNotExists);
        FeSmbFileDao.createTable(db, ifNotExists);
        SmbAccountDao.createTable(db, ifNotExists);
        GCloudAccountDao.createTable(db, ifNotExists);
        GCloudFileDao.createTable(db, ifNotExists);
        SyncInfoDao.createTable(db, ifNotExists);
        SyncSettingDao.createTable(db, ifNotExists);
        SyncHistoryDao.createTable(db, ifNotExists);
        PartitionDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        FragmentInfoDao.dropTable(db, ifExists);
        StorageDao.dropTable(db, ifExists);
        StatisticsDao.dropTable(db, ifExists);
        AppDao.dropTable(db, ifExists);
        SearchDao.dropTable(db, ifExists);
        RecentOpenDao.dropTable(db, ifExists);
        LabelDao.dropTable(db, ifExists);
        LabelFileDao.dropTable(db, ifExists);
        DownloadedFileDao.dropTable(db, ifExists);
        FavourateMusicDao.dropTable(db, ifExists);
        RecentMusicDao.dropTable(db, ifExists);
        DownloadMusicDao.dropTable(db, ifExists);
        DropboxAccountDao.dropTable(db, ifExists);
        WebDavAccountDao.dropTable(db, ifExists);
        FePrivateCloudAccountDao.dropTable(db, ifExists);
        SinaStorageAccountDao.dropTable(db, ifExists);
        DropboxFileDao.dropTable(db, ifExists);
        WebDavFileDao.dropTable(db, ifExists);
        FePrivateCloudFileDao.dropTable(db, ifExists);
        SinaStorageFileDao.dropTable(db, ifExists);
        GoogleDriveAccountDao.dropTable(db, ifExists);
        OneDriveAccountDao.dropTable(db, ifExists);
        BoxAccountDao.dropTable(db, ifExists);
        YandexAccountDao.dropTable(db, ifExists);
        SugarsyncAccountDao.dropTable(db, ifExists);
        MixCloudAccountDao.dropTable(db, ifExists);
        GoogleDriveFileDao.dropTable(db, ifExists);
        OneDriveFileDao.dropTable(db, ifExists);
        BoxFileDao.dropTable(db, ifExists);
        YandexFileDao.dropTable(db, ifExists);
        SugarsyncFileDao.dropTable(db, ifExists);
        MixCloudFileDao.dropTable(db, ifExists);
        AppFolderDao.dropTable(db, ifExists);
        FtpFileInfoDao.dropTable(db, ifExists);
        FtpAccountDao.dropTable(db, ifExists);
        FeSmbFileDao.dropTable(db, ifExists);
        SmbAccountDao.dropTable(db, ifExists);
        GCloudAccountDao.dropTable(db, ifExists);
        GCloudFileDao.dropTable(db, ifExists);
        SyncInfoDao.dropTable(db, ifExists);
        SyncSettingDao.dropTable(db, ifExists);
        SyncHistoryDao.dropTable(db, ifExists);
        PartitionDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(FragmentInfoDao.class);
        registerDaoClass(StorageDao.class);
        registerDaoClass(StatisticsDao.class);
        registerDaoClass(AppDao.class);
        registerDaoClass(SearchDao.class);
        registerDaoClass(RecentOpenDao.class);
        registerDaoClass(LabelDao.class);
        registerDaoClass(LabelFileDao.class);
        registerDaoClass(DownloadedFileDao.class);
        registerDaoClass(FavourateMusicDao.class);
        registerDaoClass(RecentMusicDao.class);
        registerDaoClass(DownloadMusicDao.class);
        registerDaoClass(DropboxAccountDao.class);
        registerDaoClass(WebDavAccountDao.class);
        registerDaoClass(FePrivateCloudAccountDao.class);
        registerDaoClass(SinaStorageAccountDao.class);
        registerDaoClass(DropboxFileDao.class);
        registerDaoClass(WebDavFileDao.class);
        registerDaoClass(FePrivateCloudFileDao.class);
        registerDaoClass(SinaStorageFileDao.class);
        registerDaoClass(GoogleDriveAccountDao.class);
        registerDaoClass(OneDriveAccountDao.class);
        registerDaoClass(BoxAccountDao.class);
        registerDaoClass(YandexAccountDao.class);
        registerDaoClass(SugarsyncAccountDao.class);
        registerDaoClass(MixCloudAccountDao.class);
        registerDaoClass(GoogleDriveFileDao.class);
        registerDaoClass(OneDriveFileDao.class);
        registerDaoClass(BoxFileDao.class);
        registerDaoClass(YandexFileDao.class);
        registerDaoClass(SugarsyncFileDao.class);
        registerDaoClass(MixCloudFileDao.class);
        registerDaoClass(AppFolderDao.class);
        registerDaoClass(FtpFileInfoDao.class);
        registerDaoClass(FtpAccountDao.class);
        registerDaoClass(FeSmbFileDao.class);
        registerDaoClass(SmbAccountDao.class);
        registerDaoClass(GCloudAccountDao.class);
        registerDaoClass(GCloudFileDao.class);
        registerDaoClass(SyncInfoDao.class);
        registerDaoClass(SyncSettingDao.class);
        registerDaoClass(SyncHistoryDao.class);
        registerDaoClass(PartitionDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
